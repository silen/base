<?php
namespace Mt\Controller;
class P2Controller extends AuthController {

    private $sModel;
    public function __construct() {
        parent::__construct();
        $this->sModel = M('p2_recommend');
        $this->assign('seo', array('title'=>'新年活动管理'));
    }
    public function index()
    {
        $page = I('get.p');
        $page = $page ? $page : 1;
        $size = 10;
        $where = array();
        $list = $this->getData($where, $page, $size);
        $count      = $this->sModel->where($where)->count();// 查询满足要求的总记录数
        $Page       = new \Think\Page($count, $size);// 实例化分页类 传入总记录数和每页显示的记录数(25)
        $Page->setConfig('prev','上一页');
        $Page->setConfig('next','下一页');
        $show       = $Page->show();// 分页显示输出
        $this->assign('list', $list);


        $this->assign('show', $show);

        $this->display();
    }
    public function recommend_content()
    {
        $page = I('get.p');
        $page = $page ? $page : 1;
        $size = 15;
        $where = array();
        $rid = I('rid');
        if (is_numeric($rid) && $rid > 0){
            $where['rid'] = $rid;
        }
        $key = I('key');
        if ($key) {
            $where['title'] = array('like', "%{$key}%");
        }
        $list =D('P2RecommendContent')->ls($where, '', $page, $size, 'pv DESC, sort ASC');
        $count      = D('P2RecommendContent')->where($where)->count();// 查询满足要求的总记录数
        $Page       = new \Think\Page($count, $size);// 实例化分页类 传入总记录数和每页显示的记录数(25)
        $Page->setConfig('prev','上一页');
        $Page->setConfig('next','下一页');
        $show       = $Page->show();// 分页显示输出
        $this->assign('list', $list);
        $this->assign('recommend', $this->sModel->getField('id,title'));
        $this->assign('show', $show);

        $this->display();
    }
    private function getData($where, $page, $size)
    {
        $list = $this->sModel->where($where)->page("{$page}, {$size}")->order('id DESC')->select();
        //$AuthGroup   =  D('AuthGroup')->getField('id,title');
        foreach ($list as &$v){
            $v['content'] = D('P2RecommendContent')->ls(array('status'=>1, 'rid'=>$v['id']), '', 1, 10, 'pv DESC, sort ASC');
        }
        //printR($list);
        return $list;
    }
    public function shake()
    {
        $_key = 'common:Shake';
        if(IS_POST) {
            $data = I('post.');
            $data['starttime'] = strtotime($data['starttime'] . ':00');

            foreach ($data as $key=>$v){
                redis()->hSet($_key, $key, $v);
            }
            $this->ajaxReturn(array('s'=>true, 'id'=> 1));

        }
        $val = redis()->hGetAll($_key);
        if (!$val['starttime'])$val['starttime'] = time();
        $this->assign($val);
        $this->display();
    }

    public function cleanCount()
    {
        redis()->hSet('common:Shake', 'shakeAllcount', 0);
        redis()->hSet('common:Shake', 'cheated', 0);
        $this->ajaxReturn(array('s'=>true, 'id'=> 1));
    }

    public function recommend_add()
    {
        if (IS_POST)
        {
            $id = I('post.id');
            $data = I('post.');
            if (!$data['title'])$this->ajaxReturn(array('s'=>false, 'info'=> '推荐位名称不能为空'));
            if (!empty($id)) {
                $this->sModel->save($data);
            } else {
                $id = $this->sModel->add($data);
            }

            $this->ajaxReturn(array('s'=>true, 'id'=> $id));
        }
        $id = I('id');
        if ($id) {
            $info = $this->sModel->where(array('id'=>$id))->find();

            $this->assign($info);
        }
        $this->display();
    }
    public function recommend_del()
    {
        $id = I('post.id');
        if (D('P2RecommendContent')->where(array('rid'=>$id))->getField('id'))$this->ajaxReturn(array('s'=>false, 'info'=> '推荐位有内容,不能删除'));

        if ($id) $this->sModel->where(array('id'=>$id))->delete();
        $this->ajaxReturn(array('s'=>true, 'id'=> $id));
    }
    public function content_add()
    {

        if (IS_POST)
        {
            $id = I('post.id');
            $data = $_POST;
           // printR($data);
            if (!$data['title'])$this->ajaxReturn(array('s'=>false, 'info'=> '名称不能为空'));
            if (!$data['url'])$this->ajaxReturn(array('s'=>false, 'info'=> '链接不能为空'));
            $data['title'] = addslashes($data['title']);

            if ($data['starttime'] && ($data['starttime'] > $data['endtime']))$this->ajaxReturn(array('status'=>false, 'info'=> '使用开始时间不能大于使用结束时间'));
            if($data['url'] && !preg_match('/(http|https):\/\/[\w.]+[\w\/]*[\w.]*\??[\w=&\+\%]*/is',$data['url'])){
                $this->ajaxReturn(array('s'=>false, 'info'=>'URL不合法'));
            }

            $data['starttime'] = strtotime($data['starttime'] . ' 00:00:00');
            $data['endtime'] = strtotime($data['endtime']. ' 23:59:59');
            if (!empty($id)) {
                D('P2RecommendContent')->save($data);
            } else {
                $id = D('P2RecommendContent')->add($data);
            }

            $this->ajaxReturn(array('s'=>true, 'id'=> $id));
        }
        $id = I('id');
        if ($id) {
            $info = D('P2RecommendContent')->where(array('id'=>$id))->find();
            $this->assign($info);
        }
        $rid = I('rid');
        $rid = $info['rid'] ? $info['rid'] : $rid;
        if (!$rid)$this->error('错误信息');
        $this->assign('rInfo', $this->sModel->where(array('id'=>$rid))->find());
        if (!$info['starttime'])$info['starttime'] = time();
        if (!$info['endtime'])$info['endtime'] = time();
        $this->assign($info);
        $this->display();
    }

    public function content_del()
    {
        $id = I('post.id');
        if ($id) D('P2RecommendContent')->where(array('id'=>$id))->delete();
        $this->ajaxReturn(array('s'=>true, 'id'=> $id));
    }

    public function updateStatus()
    {
        if(IS_AJAX && IS_POST) {
            $data = I('post.');
            if (!$data['ids'])$this->ajaxReturn(array('s'=>true, 'id'=> ''));
            $ids = implode(',', $data['ids']);
            if ($data['type'] == 4) {
                $map = array(
                    'id' => array('in', $ids),
                );
                D('P2RecommendContent')->where($map)->delete();
            } else {
                $map = array(
                    'id' => array('in', $ids),
                );
                D('P2RecommendContent')->where($map)->save(
                    array('status'=>$data['type'])
                );
            }
            $this->ajaxReturn(array('s'=>true, 'id'=> ''));
        }
    }

    public function count()
    {
        $DB_PREFIX = C('DB_PREFIX');
        $db = M();
        $sql = "SELECT sum(`pv`) as pv,rid FROM {$DB_PREFIX}p2_recommend_content GROUP BY rid";
        $info = $db->query($sql);
        foreach ($info as &$v){
            $v['recommend'] = $this->sModel->where(array('id'=>$v['rid']))->find();
        }
        $this->assign('info',$info);
        $this->display();
    }
    public function day()
    {
        $DB_PREFIX = C('DB_PREFIX');
        $db = M();
        $recommend   =  D('p2_recommend')->getField('id,title');


        $starttime = strtotime(date('Y-m-d'));
        $endtime = strtotime(date('Y-m-d') . ' 23:59:59');
        if (I('starttime')) {
            $stime = strtotime(I('starttime'));
            $starttime = $stime;
        }
        if (I('endtime')) {
            $etime = strtotime(I('endtime') . ' 23:59:59');
            $endtime = $etime;
        }
        if ($stime && $etime && ($stime > $etime)) {
            $this->error('开始时间不能大于结束时间');
        }
        $where = " WHERE addtime between {$starttime} and {$endtime}";
        //printR(date('Y-m-d H:i:s', $endtime));
        //'starttime' => array('BETWEEN', $starttime, $endtime),
        $sql = "SELECT COUNT(*) as c,rid FROM {$DB_PREFIX}p2_recommend_log {$where} GROUP BY rid";
        //printR($sql);
        $info = $db->query($sql);

        foreach ($info as &$v){
            $v['recommend'] = $recommend[$v['rid']];
        }

        $sql = "SELECT COUNT(*) as c,cid FROM {$DB_PREFIX}p2_recommend_log {$where} GROUP BY cid";
        $_info = $db->query($sql);

        foreach ($_info as &$v){
            $v['content'] = D('P2RecommendContent')->where(array('id'=>$v['cid']))->find();
            $v['recommend'] = $recommend[$v['content']['rid']];
        }
        $this->assign('starttime', $starttime);
        $this->assign('endtime',$endtime);
        $this->assign('info',$info);
        $this->assign('content',$_info);
        $this->display();
    }

}